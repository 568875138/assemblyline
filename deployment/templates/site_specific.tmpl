import codecs
import markdown
import os

from flask import request, Markup

from assemblyline.al.common import forge
from al_ui.site_specific import create_menu as original_create_menu, TEMPLATE_PREFIX,
    register_site_specific_routes as original_register_site_specific_routes
from assemblyline.al.common.codec import encode_file as original_encode_file

APP_NAME = "{app_name}"
PRIVATE_PREFIX = "private/"
TEMPLATE_PREFIX.update(
    {{
        'base': PRIVATE_PREFIX,
        'submit': PRIVATE_PREFIX
    }}
)

Classification = forge.get_classification()


#############################
# Alternate menu items
def create_menu(user, path):
    menu = original_create_menu(user, path)

    # You can add you own menus here..

    return menu


#############################
# Alternate file decoding techniques
# you can replace this function with a function that adds extra decoding functions
def encode_file(data, file_format, name, password=None):
    return original_encode_file(data, file_format, name, password=password)


##########################
# New Routes/Blueprints
def register_site_specific_routes(app):
    # ###### You can load extra APIs here
    # from private.ui.apiv3.myapi import myapi_api

    # ### You can add html pages here
    # from al_ui.helper.views import protected_renderer, custom_render
    # @app.route("/mock.html", endpoint="views.mock")
    # @protected_renderer(require_admin=True, audit=False)
    # def mock(*_, **kwargs):
    #     return custom_render("mock.html", **kwargs)

    # ###### You can register you newly load APIs here
    # app.register_blueprint(myapi_api)

    # End of register_site_specific_routes
    original_register_site_specific_routes(app)

context = {{
    'TEMPLATE_PREFIX': TEMPLATE_PREFIX,
    'APP_NAME': APP_NAME,
    'create_menu': create_menu,
    'encode_file': encode_file,
    'register_site_specific_routes': register_site_specific_routes,
}}
